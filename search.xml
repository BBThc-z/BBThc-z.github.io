<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑马点评项目总结</title>
      <link href="/2024/08/07/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2024/08/07/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马点评项目技术总结"><a href="#黑马点评项目技术总结" class="headerlink" title="黑马点评项目技术总结"></a>黑马点评项目技术总结</h1><h2 id="一、基于Redis实现发送短信验证码功能"><a href="#一、基于Redis实现发送短信验证码功能" class="headerlink" title="一、基于Redis实现发送短信验证码功能"></a>一、基于Redis实现发送短信验证码功能</h2><h3 id="1-1-基于session实现发送短信验证码功能流程"><a href="#1-1-基于session实现发送短信验证码功能流程" class="headerlink" title="1.1 基于session实现发送短信验证码功能流程"></a>1.1 基于session实现发送短信验证码功能流程</h3><h4 id="1-发送短信验证码"><a href="#1-发送短信验证码" class="headerlink" title="1. 发送短信验证码"></a>1. 发送短信验证码</h4><p>  若用户使用手机号 + 短信验证码的方式进行登录，当用户点击获取验证码时，会向后台发送一条请求，下图就是后台对该请求的处理流程：</p><ol><li>校验手机号</li><li>生成验证码</li><li>保存验证码到session(用于后续校验)</li><li>发送验证码到用户手机  <img src="/2024/08/07/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/image-1.png" class="" title="图片"></li></ol><h4 id="2-短信验证码登录、注册"><a href="#2-短信验证码登录、注册" class="headerlink" title="2. 短信验证码登录、注册"></a>2. 短信验证码登录、注册</h4><p>  这一步是用户点击登录按钮发送到后端的请求，后端对该请求的处理流程，具体如下：</p><ol><li>校验手机号(这一步是防止用户在登陆前修改手机号)</li><li>根据第一步保存到session的验证码与前端发送的验证码比对</li><li>判断用户是否已注册</li><li>将用户保存到session中，为后续其他网页的校验做准备  <img src="/2024/08/07/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/image-2.png" class="" title="alt text"></li></ol><h4 id="3-校验登陆状态"><a href="#3-校验登陆状态" class="headerlink" title="3. 校验登陆状态"></a>3. 校验登陆状态</h4><p>  为了实现对用户的每一个页面访问进行校验的功能，此时需要用到拦截器，在拦截器中对http请求携带的cookie以及保存在session中的信息进行比较。拦截器的实现以及拦截器和过滤器的区别将在后文进行说明。<br>  若存在用户，则将脱敏后的用户信息保存到ThreadLocal中，由于每一个session都是一个线程，因此只要不关闭页面，那么以后每次对后端的请求都可以从ThreadLocal中获取本次session的用户信息。<br>  <img src="/2024/08/07/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/image-3.png" class="" title="alt text"></p><h3 id="1-2-集群的session的共享问题"><a href="#1-2-集群的session的共享问题" class="headerlink" title="1.2 集群的session的共享问题"></a>1.2 集群的session的共享问题</h3><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h4><p>  由于session时保存在后端服务器内存中，且多台服务器无法共享session。因此这在实际的后端服务器集群模式下，会产生用户在服务器A登录保存到session登陆凭证，再次访问服务器B时无法得到登录的信息凭证的问题。</p><h4 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h4><p>  为解决集群下session的共享问题，设计的方案需要满足以下几点要求：</p><ol><li>数据共享</li><li>内存存储</li><li>key-value结构</li></ol><p>  redis恰好满足上述所有的要求，因此使用redis来保存验证码信息以及用户登录的authorization。</p><h4 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h4><p>  将保存到session中的验证码和用户登录的authorization保存到redis中即可，同时用户每一次对网站的访问，都会刷新登录的authorization的有效期；在用户登陆成功后，及时将登陆的验证码从redis中删除。</p><h3 id="附：拦截器的实现"><a href="#附：拦截器的实现" class="headerlink" title="附：拦截器的实现"></a>附：拦截器的实现</h3><ol><li><p>创建一个类实现HandlerInterceptor接口，重写preHandle方法，afterCompletion可根据需求自定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个实现WebMvcConfigurer接口的类，重写其中的addInterceptors方法，该类中可以配置所有的拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意不要忘记注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// order越小越靠前</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshInterceptor</span>(stringRedisTemplate))</span><br><span class="line">                .order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 项目经历 </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/08/06/test%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/08/06/test%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="test-第一篇文章"><a href="#test-第一篇文章" class="headerlink" title="test 第一篇文章"></a>test 第一篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
